#ifndef COLOR_H_
#define COLOR_H_

#include <cmath>
#include <cstdint>

struct RGBColor;

template <int MinWavelengthInNanometers, int MaxWavelengthInNanometers>
struct SpectrumLookupTable
{
    static constexpr int minWavelengthInNanometers = MinWavelengthInNanometers;
    static constexpr int maxWavelengthInNanometers = MaxWavelengthInNanometers;
    static_assert(maxWavelengthInNanometers >= minWavelengthInNanometers, "");
    static constexpr std::size_t valueCount =
        maxWavelengthInNanometers - minWavelengthInNanometers + 1;
    float values[valueCount];
    static constexpr int constexprFloor(float v) noexcept
    {
        return v < 0 ? -static_cast<int>(-v) : static_cast<int>(v);
    }
    constexpr float getI(int wavelengthInNanometers) const noexcept
    {
        if(wavelengthInNanometers < minWavelengthInNanometers)
            return 0;
        if(wavelengthInNanometers > maxWavelengthInNanometers)
            return 0;
        return values[wavelengthInNanometers - minWavelengthInNanometers];
    }
    constexpr float get(float wavelengthInNanometers) const noexcept
    {
        if(wavelengthInNanometers < minWavelengthInNanometers - 1)
            return 0;
        if(!(wavelengthInNanometers < maxWavelengthInNanometers + 1)) // catch NaN values too
            return 0;
        int floorWavelength = constexprFloor(wavelengthInNanometers);
        float t = wavelengthInNanometers - floorWavelength;
        float valueAtMin = getI(floorWavelength);
        float valueAtMax = getI(floorWavelength + 1);
        return valueAtMin + t * (valueAtMax - valueAtMin);
    }
};

template <int MinWavelengthInNanometers, int MaxWavelengthInNanometers>
constexpr int SpectrumLookupTable<MinWavelengthInNanometers,
                                  MaxWavelengthInNanometers>::minWavelengthInNanometers;

template <int MinWavelengthInNanometers, int MaxWavelengthInNanometers>
constexpr int SpectrumLookupTable<MinWavelengthInNanometers,
                                  MaxWavelengthInNanometers>::maxWavelengthInNanometers;

template <int MinWavelengthInNanometers, int MaxWavelengthInNanometers>
constexpr std::size_t
    SpectrumLookupTable<MinWavelengthInNanometers, MaxWavelengthInNanometers>::valueCount;

typedef SpectrumLookupTable<390, 830> CIEColorMatchingFunction;

constexpr SpectrumLookupTable<300, 830> makeD65Spectrum() noexcept
{
    constexpr float scaleFactor = 1 / 25.206314;
    constexpr SpectrumLookupTable<300, 830> unscaledSpectrum = {{
        0.03410000f,
        0.36014000f,
        0.68618000f,
        1.01222000f,
        1.33826000f,
        1.66430000f,
        1.99034000f,
        2.31638000f,
        2.64242000f,
        2.96846000f,
        3.29450000f,
        4.98864000f,
        6.68278000f,
        8.37692000f,
        10.0710600f,
        11.7652000f,
        13.4593600f,
        15.1535200f,
        16.8476800f,
        18.5418400f,
        20.2360000f,
        21.9177400f,
        23.5994800f,
        25.2812200f,
        26.9629600f,
        28.6447000f,
        30.3264600f,
        32.0082200f,
        33.6899800f,
        35.3717400f,
        37.0535000f,
        37.3430200f,
        37.6325400f,
        37.9220600f,
        38.2115800f,
        38.5011000f,
        38.7906400f,
        39.0801800f,
        39.3697200f,
        39.6592600f,
        39.9488000f,
        40.4450800f,
        40.9413600f,
        41.4376400f,
        41.9339200f,
        42.4302000f,
        42.9265000f,
        43.4228000f,
        43.9191000f,
        44.4154000f,
        44.9117000f,
        45.0843600f,
        45.2570200f,
        45.4296800f,
        45.6023400f,
        45.7750000f,
        45.9476600f,
        46.1203200f,
        46.2929800f,
        46.4656400f,
        46.6383000f,
        47.1833800f,
        47.7284600f,
        48.2735400f,
        48.8186200f,
        49.3637000f,
        49.9087800f,
        50.4538600f,
        50.9989400f,
        51.5440200f,
        52.0891000f,
        51.8777400f,
        51.6663800f,
        51.4550200f,
        51.2436600f,
        51.0323000f,
        50.8209400f,
        50.6095800f,
        50.3982200f,
        50.1868600f,
        49.9755000f,
        50.4427600f,
        50.9100200f,
        51.3772800f,
        51.8445400f,
        52.3118000f,
        52.7790800f,
        53.2463600f,
        53.7136400f,
        54.1809200f,
        54.6482000f,
        57.4588600f,
        60.2695200f,
        63.0801800f,
        65.8908400f,
        68.7015000f,
        71.5121800f,
        74.3228600f,
        77.1335400f,
        79.9442200f,
        82.7549000f,
        83.6280000f,
        84.5011000f,
        85.3742000f,
        86.2473000f,
        87.1204000f,
        87.9935200f,
        88.8666400f,
        89.7397600f,
        90.6128800f,
        91.4860000f,
        91.6805800f,
        91.8751600f,
        92.0697400f,
        92.2643200f,
        92.4589000f,
        92.6534800f,
        92.8480600f,
        93.0426400f,
        93.2372200f,
        93.4318000f,
        92.7568400f,
        92.0818800f,
        91.4069200f,
        90.7319600f,
        90.0570000f,
        89.3820600f,
        88.7071200f,
        88.0321800f,
        87.3572400f,
        86.6823000f,
        88.5005600f,
        90.3188200f,
        92.1370800f,
        93.9553400f,
        95.7736000f,
        97.5918800f,
        99.4101600f,
        101.228440f,
        103.046720f,
        104.865000f,
        106.079200f,
        107.293400f,
        108.507600f,
        109.721800f,
        110.936000f,
        112.150400f,
        113.364800f,
        114.579200f,
        115.793600f,
        117.008000f,
        117.088400f,
        117.168800f,
        117.249200f,
        117.329600f,
        117.410000f,
        117.490400f,
        117.570800f,
        117.651200f,
        117.731600f,
        117.812000f,
        117.516800f,
        117.221600f,
        116.926400f,
        116.631200f,
        116.336000f,
        116.041000f,
        115.746000f,
        115.451000f,
        115.156000f,
        114.861000f,
        114.967200f,
        115.073400f,
        115.179600f,
        115.285800f,
        115.392000f,
        115.498200f,
        115.604400f,
        115.710600f,
        115.816800f,
        115.923000f,
        115.211800f,
        114.500600f,
        113.789400f,
        113.078200f,
        112.367000f,
        111.655800f,
        110.944600f,
        110.233400f,
        109.522200f,
        108.811000f,
        108.865200f,
        108.919400f,
        108.973600f,
        109.027800f,
        109.082000f,
        109.136400f,
        109.190800f,
        109.245200f,
        109.299600f,
        109.354000f,
        109.198800f,
        109.043600f,
        108.888400f,
        108.733200f,
        108.578000f,
        108.422800f,
        108.267600f,
        108.112400f,
        107.957200f,
        107.802000f,
        107.500800f,
        107.199600f,
        106.898400f,
        106.597200f,
        106.296000f,
        105.994800f,
        105.693600f,
        105.392400f,
        105.091200f,
        104.790000f,
        105.079800f,
        105.369600f,
        105.659400f,
        105.949200f,
        106.239000f,
        106.529000f,
        106.819000f,
        107.109000f,
        107.399000f,
        107.689000f,
        107.360600f,
        107.032200f,
        106.703800f,
        106.375400f,
        106.047000f,
        105.718600f,
        105.390200f,
        105.061800f,
        104.733400f,
        104.405000f,
        104.369000f,
        104.333000f,
        104.297000f,
        104.261000f,
        104.225000f,
        104.189200f,
        104.153400f,
        104.117600f,
        104.081800f,
        104.046000f,
        103.641400f,
        103.236800f,
        102.832200f,
        102.427600f,
        102.023000f,
        101.618400f,
        101.213800f,
        100.809200f,
        100.404600f,
        100.000000f,
        99.6334200f,
        99.2668400f,
        98.9002600f,
        98.5336800f,
        98.1671000f,
        97.8005200f,
        97.4339400f,
        97.0673600f,
        96.7007800f,
        96.3342000f,
        96.2795800f,
        96.2249600f,
        96.1703400f,
        96.1157200f,
        96.0611000f,
        96.0064800f,
        95.9518600f,
        95.8972400f,
        95.8426200f,
        95.7880000f,
        95.0777600f,
        94.3675200f,
        93.6572800f,
        92.9470400f,
        92.2368000f,
        91.5265600f,
        90.8163200f,
        90.1060800f,
        89.3958400f,
        88.6856000f,
        88.8176600f,
        88.9497200f,
        89.0817800f,
        89.2138400f,
        89.3459000f,
        89.4779600f,
        89.6100200f,
        89.7420800f,
        89.8741400f,
        90.0062000f,
        89.9654800f,
        89.9247600f,
        89.8840400f,
        89.8433200f,
        89.8026000f,
        89.7619000f,
        89.7212000f,
        89.6805000f,
        89.6398000f,
        89.5991000f,
        89.4090600f,
        89.2190200f,
        89.0289800f,
        88.8389400f,
        88.6489000f,
        88.4588600f,
        88.2688200f,
        88.0787800f,
        87.8887400f,
        87.6987000f,
        87.2576800f,
        86.8166600f,
        86.3756400f,
        85.9346200f,
        85.4936000f,
        85.0526000f,
        84.6116000f,
        84.1706000f,
        83.7296000f,
        83.2886000f,
        83.3296600f,
        83.3707200f,
        83.4117800f,
        83.4528400f,
        83.4939000f,
        83.5349600f,
        83.5760200f,
        83.6170800f,
        83.6581400f,
        83.6992000f,
        83.3319600f,
        82.9647200f,
        82.5974800f,
        82.2302400f,
        81.8630000f,
        81.4957600f,
        81.1285200f,
        80.7612800f,
        80.3940400f,
        80.0268000f,
        80.0455800f,
        80.0643600f,
        80.0831400f,
        80.1019200f,
        80.1207000f,
        80.1394800f,
        80.1582600f,
        80.1770400f,
        80.1958200f,
        80.2146000f,
        80.4209200f,
        80.6272400f,
        80.8335600f,
        81.0398800f,
        81.2462000f,
        81.4525200f,
        81.6588400f,
        81.8651600f,
        82.0714800f,
        82.2778000f,
        81.8784400f,
        81.4790800f,
        81.0797200f,
        80.6803600f,
        80.2810000f,
        79.8816400f,
        79.4822800f,
        79.0829200f,
        78.6835600f,
        78.2842000f,
        77.4279000f,
        76.5716000f,
        75.7153000f,
        74.8590000f,
        74.0027000f,
        73.1464200f,
        72.2901400f,
        71.4338600f,
        70.5775800f,
        69.7213000f,
        69.9100800f,
        70.0988600f,
        70.2876400f,
        70.4764200f,
        70.6652000f,
        70.8539800f,
        71.0427600f,
        71.2315400f,
        71.4203200f,
        71.6091000f,
        71.8830800f,
        72.1570600f,
        72.4310400f,
        72.7050200f,
        72.9790000f,
        73.2530000f,
        73.5270000f,
        73.8010000f,
        74.0750000f,
        74.3490000f,
        73.0745000f,
        71.8000000f,
        70.5255000f,
        69.2510000f,
        67.9765000f,
        66.7020000f,
        65.4275000f,
        64.1530000f,
        62.8785000f,
        61.6040000f,
        62.4321600f,
        63.2603200f,
        64.0884800f,
        64.9166400f,
        65.7448000f,
        66.5729600f,
        67.4011200f,
        68.2292800f,
        69.0574400f,
        69.8856000f,
        70.4057400f,
        70.9258800f,
        71.4460200f,
        71.9661600f,
        72.4863000f,
        73.0064400f,
        73.5265800f,
        74.0467200f,
        74.5668600f,
        75.0870000f,
        73.9375600f,
        72.7881200f,
        71.6386800f,
        70.4892400f,
        69.3398000f,
        68.1903800f,
        67.0409600f,
        65.8915400f,
        64.7421200f,
        63.5927000f,
        61.8752400f,
        60.1577800f,
        58.4403200f,
        56.7228600f,
        55.0054000f,
        53.2879600f,
        51.5705200f,
        49.8530800f,
        48.1356400f,
        46.4182000f,
        48.4569200f,
        50.4956400f,
        52.5343600f,
        54.5730800f,
        56.6118000f,
        58.6505200f,
        60.6892400f,
        62.7279600f,
        64.7666800f,
        66.8054000f,
        66.4631400f,
        66.1208800f,
        65.7786200f,
        65.4363600f,
        65.0941000f,
        64.7518400f,
        64.4095800f,
        64.0673200f,
        63.7250600f,
        63.3828000f,
        63.4749200f,
        63.5670400f,
        63.6591600f,
        63.7512800f,
        63.8434000f,
        63.9355200f,
        64.0276400f,
        64.1197600f,
        64.2118800f,
        64.3040000f,
        63.8187800f,
        63.3335600f,
        62.8483400f,
        62.3631200f,
        61.8779000f,
        61.3927000f,
        60.9075000f,
        60.4223000f,
        59.9371000f,
        59.4519000f,
        58.7026000f,
        57.9533000f,
        57.2040000f,
        56.4547000f,
        55.7054000f,
        54.9561200f,
        54.2068400f,
        53.4575600f,
        52.7082800f,
        51.9590000f,
        52.5071600f,
        53.0553200f,
        53.6034800f,
        54.1516400f,
        54.6998000f,
        55.2479600f,
        55.7961200f,
        56.3442800f,
        56.8924400f,
        57.4406000f,
        57.7277800f,
        58.0149600f,
        58.3021400f,
        58.5893200f,
        58.8765000f,
        59.1637000f,
        59.4509000f,
        59.7381000f,
        60.0253000f,
        60.3125000f, }};
    SpectrumLookupTable<300, 830> retval{};
    for(std::size_t i = 0; i < retval.valueCount; i++)
        retval.values[i] = unscaledSpectrum.values[i] * scaleFactor;
    return retval;
}

constexpr SpectrumLookupTable<300, 830> d65Spectrum = makeD65Spectrum();

struct XYZColor
{
    static constexpr CIEColorMatchingFunction cieXColorMatchingFunction = {{
        3.769647e-03f,
        4.532416e-03f,
        5.446553e-03f,
        6.538868e-03f,
        7.839699e-03f,
        9.382967e-03f,
        1.120608e-02f,
        1.334965e-02f,
        1.585690e-02f,
        1.877286e-02f,
        2.214302e-02f,
        2.601285e-02f,
        3.043036e-02f,
        3.544325e-02f,
        4.109640e-02f,
        4.742986e-02f,
        5.447394e-02f,
        6.223612e-02f,
        7.070048e-02f,
        7.982513e-02f,
        8.953803e-02f,
        9.974848e-02f,
        1.104019e-01f,
        1.214566e-01f,
        1.328741e-01f,
        1.446214e-01f,
        1.566468e-01f,
        1.687901e-01f,
        1.808328e-01f,
        1.925216e-01f,
        2.035729e-01f,
        2.137531e-01f,
        2.231348e-01f,
        2.319245e-01f,
        2.403892e-01f,
        2.488523e-01f,
        2.575896e-01f,
        2.664991e-01f,
        2.753532e-01f,
        2.838921e-01f,
        2.918246e-01f,
        2.989200e-01f,
        3.052993e-01f,
        3.112031e-01f,
        3.169047e-01f,
        3.227087e-01f,
        3.288194e-01f,
        3.349242e-01f,
        3.405452e-01f,
        3.451688e-01f,
        3.482554e-01f,
        3.494153e-01f,
        3.489075e-01f,
        3.471746e-01f,
        3.446705e-01f,
        3.418483e-01f,
        3.390240e-01f,
        3.359926e-01f,
        3.324276e-01f,
        3.280157e-01f,
        3.224637e-01f,
        3.156225e-01f,
        3.078201e-01f,
        2.994771e-01f,
        2.909776e-01f,
        2.826646e-01f,
        2.747962e-01f,
        2.674312e-01f,
        2.605847e-01f,
        2.542749e-01f,
        2.485254e-01f,
        2.433039e-01f,
        2.383414e-01f,
        2.333253e-01f,
        2.279619e-01f,
        2.219781e-01f,
        2.151735e-01f,
        2.075619e-01f,
        1.992183e-01f,
        1.902290e-01f,
        1.806905e-01f,
        1.707154e-01f,
        1.604471e-01f,
        1.500244e-01f,
        1.395705e-01f,
        1.291920e-01f,
        1.189859e-01f,
        1.090615e-01f,
        9.951424e-02f,
        9.041850e-02f,
        8.182895e-02f,
        7.376817e-02f,
        6.619477e-02f,
        5.906380e-02f,
        5.234242e-02f,
        4.600865e-02f,
        4.006154e-02f,
        3.454373e-02f,
        2.949091e-02f,
        2.492140e-02f,
        2.083981e-02f,
        1.723591e-02f,
        1.407924e-02f,
        1.134516e-02f,
        9.019658e-03f,
        7.097731e-03f,
        5.571145e-03f,
        4.394566e-03f,
        3.516303e-03f,
        2.887638e-03f,
        2.461588e-03f,
        2.206348e-03f,
        2.149559e-03f,
        2.337091e-03f,
        2.818931e-03f,
        3.649178e-03f,
        4.891359e-03f,
        6.629364e-03f,
        8.942902e-03f,
        1.190224e-02f,
        1.556989e-02f,
        1.997668e-02f,
        2.504698e-02f,
        3.067530e-02f,
        3.674999e-02f,
        4.315171e-02f,
        4.978584e-02f,
        5.668554e-02f,
        6.391651e-02f,
        7.154352e-02f,
        7.962917e-02f,
        8.821473e-02f,
        9.726978e-02f,
        1.067504e-01f,
        1.166192e-01f,
        1.268468e-01f,
        1.374060e-01f,
        1.482471e-01f,
        1.593076e-01f,
        1.705181e-01f,
        1.818026e-01f,
        1.931090e-01f,
        2.045085e-01f,
        2.161166e-01f,
        2.280650e-01f,
        2.405015e-01f,
        2.535441e-01f,
        2.671300e-01f,
        2.811351e-01f,
        2.954164e-01f,
        3.098117e-01f,
        3.241678e-01f,
        3.384319e-01f,
        3.525786e-01f,
        3.665839e-01f,
        3.804244e-01f,
        3.940988e-01f,
        4.076972e-01f,
        4.213484e-01f,
        4.352003e-01f,
        4.494206e-01f,
        4.641616e-01f,
        4.794395e-01f,
        4.952180e-01f,
        5.114395e-01f,
        5.280233e-01f,
        5.448696e-01f,
        5.618898e-01f,
        5.790137e-01f,
        5.961882e-01f,
        6.133784e-01f,
        6.305897e-01f,
        6.479223e-01f,
        6.654866e-01f,
        6.833782e-01f,
        7.016774e-01f,
        7.204110e-01f,
        7.394495e-01f,
        7.586285e-01f,
        7.777885e-01f,
        7.967750e-01f,
        8.154530e-01f,
        8.337389e-01f,
        8.515493e-01f,
        8.687862e-01f,
        8.853376e-01f,
        9.011588e-01f,
        9.165278e-01f,
        9.318245e-01f,
        9.474524e-01f,
        9.638388e-01f,
        9.812596e-01f,
        9.992953e-01f,
        1.017343e+00f,
        1.034790e+00f,
        1.051011e+00f,
        1.065522e+00f,
        1.078421e+00f,
        1.089944e+00f,
        1.100320e+00f,
        1.109767e+00f,
        1.118438e+00f,
        1.126266e+00f,
        1.133138e+00f,
        1.138952e+00f,
        1.143620e+00f,
        1.147095e+00f,
        1.149464e+00f,
        1.150838e+00f,
        1.151326e+00f,
        1.151033e+00f,
        1.150002e+00f,
        1.148061e+00f,
        1.144998e+00f,
        1.140622e+00f,
        1.134757e+00f,
        1.127298e+00f,
        1.118342e+00f,
        1.108033e+00f,
        1.096515e+00f,
        1.083928e+00f,
        1.070387e+00f,
        1.055934e+00f,
        1.040592e+00f,
        1.024385e+00f,
        1.007344e+00f,
        9.895268e-01f,
        9.711213e-01f,
        9.523257e-01f,
        9.333248e-01f,
        9.142877e-01f,
        8.952798e-01f,
        8.760157e-01f,
        8.561607e-01f,
        8.354235e-01f,
        8.135565e-01f,
        7.904565e-01f,
        7.664364e-01f,
        7.418777e-01f,
        7.171219e-01f,
        6.924717e-01f,
        6.681600e-01f,
        6.442697e-01f,
        6.208450e-01f,
        5.979243e-01f,
        5.755410e-01f,
        5.537296e-01f,
        5.325412e-01f,
        5.120218e-01f,
        4.922070e-01f,
        4.731224e-01f,
        4.547417e-01f,
        4.368719e-01f,
        4.193121e-01f,
        4.018980e-01f,
        3.844986e-01f,
        3.670592e-01f,
        3.497167e-01f,
        3.326305e-01f,
        3.159341e-01f,
        2.997374e-01f,
        2.841189e-01f,
        2.691053e-01f,
        2.547077e-01f,
        2.409319e-01f,
        2.277792e-01f,
        2.152431e-01f,
        2.033010e-01f,
        1.919276e-01f,
        1.810987e-01f,
        1.707914e-01f,
        1.609842e-01f,
        1.516577e-01f,
        1.427936e-01f,
        1.343737e-01f,
        1.263808e-01f,
        1.187979e-01f,
        1.116088e-01f,
        1.047975e-01f,
        9.834835e-02f,
        9.224597e-02f,
        8.647506e-02f,
        8.101986e-02f,
        7.586514e-02f,
        7.099633e-02f,
        6.639960e-02f,
        6.206225e-02f,
        5.797409e-02f,
        5.412533e-02f,
        5.050600e-02f,
        4.710606e-02f,
        4.391411e-02f,
        4.091411e-02f,
        3.809067e-02f,
        3.543034e-02f,
        3.292138e-02f,
        3.055672e-02f,
        2.834146e-02f,
        2.628033e-02f,
        2.437465e-02f,
        2.262306e-02f,
        2.101935e-02f,
        1.954647e-02f,
        1.818727e-02f,
        1.692727e-02f,
        1.575417e-02f,
        1.465854e-02f,
        1.363571e-02f,
        1.268205e-02f,
        1.179394e-02f,
        1.096778e-02f,
        1.019964e-02f,
        9.484317e-03f,
        8.816851e-03f,
        8.192921e-03f,
        7.608750e-03f,
        7.061391e-03f,
        6.549509e-03f,
        6.071970e-03f,
        5.627476e-03f,
        5.214608e-03f,
        4.831848e-03f,
        4.477579e-03f,
        4.150166e-03f,
        3.847988e-03f,
        3.569452e-03f,
        3.312857e-03f,
        3.076022e-03f,
        2.856894e-03f,
        2.653681e-03f,
        2.464821e-03f,
        2.289060e-03f,
        2.125694e-03f,
        1.974121e-03f,
        1.833723e-03f,
        1.703876e-03f,
        1.583904e-03f,
        1.472939e-03f,
        1.370151e-03f,
        1.274803e-03f,
        1.186238e-03f,
        1.103871e-03f,
        1.027194e-03f,
        9.557493e-04f,
        8.891262e-04f,
        8.269535e-04f,
        7.689351e-04f,
        7.149425e-04f,
        6.648590e-04f,
        6.185421e-04f,
        5.758303e-04f,
        5.365046e-04f,
        5.001842e-04f,
        4.665005e-04f,
        4.351386e-04f,
        4.058303e-04f,
        3.783733e-04f,
        3.526892e-04f,
        3.287199e-04f,
        3.063998e-04f,
        2.856577e-04f,
        2.664108e-04f,
        2.485462e-04f,
        2.319529e-04f,
        2.165300e-04f,
        2.021853e-04f,
        1.888338e-04f,
        1.763935e-04f,
        1.647895e-04f,
        1.539542e-04f,
        1.438270e-04f,
        1.343572e-04f,
        1.255141e-04f,
        1.172706e-04f,
        1.095983e-04f,
        1.024685e-04f,
        9.584715e-05f,
        8.968316e-05f,
        8.392734e-05f,
        7.853708e-05f,
        7.347551e-05f,
        6.871576e-05f,
        6.425257e-05f,
        6.008292e-05f,
        5.620098e-05f,
        5.259870e-05f,
        4.926279e-05f,
        4.616623e-05f,
        4.328212e-05f,
        4.058715e-05f,
        3.806114e-05f,
        3.568818e-05f,
        3.346023e-05f,
        3.137090e-05f,
        2.941371e-05f,
        2.758222e-05f,
        2.586951e-05f,
        2.426701e-05f,
        2.276639e-05f,
        2.136009e-05f,
        2.004122e-05f,
        1.880380e-05f,
        1.764358e-05f,
        1.655671e-05f,
        1.553939e-05f,
        1.458792e-05f,
        1.369853e-05f,
        1.286705e-05f,
        1.208947e-05f,
        1.136207e-05f,
        1.068141e-05f,
        1.004411e-05f,
        9.446399e-06f,
        8.884754e-06f,
        8.356050e-06f,
        7.857521e-06f,
        7.386996e-06f,
        6.943576e-06f,
        6.526548e-06f,
        6.135087e-06f,
        5.768284e-06f,
        5.425069e-06f,
        5.103974e-06f,
        4.803525e-06f,
        4.522350e-06f,
        4.259166e-06f,
        4.012715e-06f,
        3.781597e-06f,
        3.564496e-06f,
        3.360236e-06f,
        3.167765e-06f,
        2.986206e-06f,
        2.814999e-06f,
        2.653663e-06f,
        2.501725e-06f,
        2.358723e-06f,
        2.224206e-06f,
        2.097737e-06f,
        1.978894e-06f,
        1.867268e-06f,
        1.762465e-06f,
    }};
    static constexpr CIEColorMatchingFunction cieYColorMatchingFunction = {{
        4.146161e-04f,
        5.028333e-04f,
        6.084991e-04f,
        7.344436e-04f,
        8.837389e-04f,
        1.059646e-03f,
        1.265532e-03f,
        1.504753e-03f,
        1.780493e-03f,
        2.095572e-03f,
        2.452194e-03f,
        2.852216e-03f,
        3.299115e-03f,
        3.797466e-03f,
        4.352768e-03f,
        4.971717e-03f,
        5.661014e-03f,
        6.421615e-03f,
        7.250312e-03f,
        8.140173e-03f,
        9.079860e-03f,
        1.005608e-02f,
        1.106456e-02f,
        1.210522e-02f,
        1.318014e-02f,
        1.429377e-02f,
        1.545004e-02f,
        1.664093e-02f,
        1.785302e-02f,
        1.907018e-02f,
        2.027369e-02f,
        2.144805e-02f,
        2.260041e-02f,
        2.374789e-02f,
        2.491247e-02f,
        2.612106e-02f,
        2.739923e-02f,
        2.874993e-02f,
        3.016909e-02f,
        3.165145e-02f,
        3.319038e-02f,
        3.477912e-02f,
        3.641495e-02f,
        3.809569e-02f,
        3.981843e-02f,
        4.157940e-02f,
        4.337098e-02f,
        4.517180e-02f,
        4.695420e-02f,
        4.868718e-02f,
        5.033657e-02f,
        5.187611e-02f,
        5.332218e-02f,
        5.470603e-02f,
        5.606335e-02f,
        5.743393e-02f,
        5.885107e-02f,
        6.030809e-02f,
        6.178644e-02f,
        6.326570e-02f,
        6.472352e-02f,
        6.614749e-02f,
        6.757256e-02f,
        6.904928e-02f,
        7.063280e-02f,
        7.238339e-02f,
        7.435960e-02f,
        7.659383e-02f,
        7.911436e-02f,
        8.195345e-02f,
        8.514816e-02f,
        8.872657e-02f,
        9.266008e-02f,
        9.689723e-02f,
        1.013746e-01f,
        1.060145e-01f,
        1.107377e-01f,
        1.155111e-01f,
        1.203122e-01f,
        1.251161e-01f,
        1.298957e-01f,
        1.346299e-01f,
        1.393309e-01f,
        1.440235e-01f,
        1.487372e-01f,
        1.535066e-01f,
        1.583644e-01f,
        1.633199e-01f,
        1.683761e-01f,
        1.735365e-01f,
        1.788048e-01f,
        1.841819e-01f,
        1.896559e-01f,
        1.952101e-01f,
        2.008259e-01f,
        2.064828e-01f,
        2.121826e-01f,
        2.180279e-01f,
        2.241586e-01f,
        2.307302e-01f,
        2.379160e-01f,
        2.458706e-01f,
        2.546023e-01f,
        2.640760e-01f,
        2.742490e-01f,
        2.850680e-01f,
        2.964837e-01f,
        3.085010e-01f,
        3.211393e-01f,
        3.344175e-01f,
        3.483536e-01f,
        3.629601e-01f,
        3.782275e-01f,
        3.941359e-01f,
        4.106582e-01f,
        4.277595e-01f,
        4.453993e-01f,
        4.635396e-01f,
        4.821376e-01f,
        5.011430e-01f,
        5.204972e-01f,
        5.401387e-01f,
        5.600208e-01f,
        5.800972e-01f,
        6.003172e-01f,
        6.206256e-01f,
        6.409398e-01f,
        6.610772e-01f,
        6.808134e-01f,
        6.999044e-01f,
        7.180890e-01f,
        7.351593e-01f,
        7.511821e-01f,
        7.663143e-01f,
        7.807352e-01f,
        7.946448e-01f,
        8.082074e-01f,
        8.213817e-01f,
        8.340701e-01f,
        8.461711e-01f,
        8.575799e-01f,
        8.682408e-01f,
        8.783061e-01f,
        8.879907e-01f,
        8.975211e-01f,
        9.071347e-01f,
        9.169947e-01f,
        9.269295e-01f,
        9.366731e-01f,
        9.459482e-01f,
        9.544675e-01f,
        9.619834e-01f,
        9.684390e-01f,
        9.738289e-01f,
        9.781519e-01f,
        9.814106e-01f,
        9.836669e-01f,
        9.852081e-01f,
        9.863813e-01f,
        9.875357e-01f,
        9.890228e-01f,
        9.910811e-01f,
        9.934913e-01f,
        9.959172e-01f,
        9.980205e-01f,
        9.994608e-01f,
        9.999930e-01f,
        9.997557e-01f,
        9.989839e-01f,
        9.979123e-01f,
        9.967737e-01f,
        9.957356e-01f,
        9.947115e-01f,
        9.935534e-01f,
        9.921156e-01f,
        9.902549e-01f,
        9.878596e-01f,
        9.849324e-01f,
        9.815036e-01f,
        9.776035e-01f,
        9.732611e-01f,
        9.684764e-01f,
        9.631369e-01f,
        9.571062e-01f,
        9.502540e-01f,
        9.424569e-01f,
        9.336897e-01f,
        9.242893e-01f,
        9.146707e-01f,
        9.052333e-01f,
        8.963613e-01f,
        8.883069e-01f,
        8.808462e-01f,
        8.736445e-01f,
        8.663755e-01f,
        8.587203e-01f,
        8.504295e-01f,
        8.415047e-01f,
        8.320109e-01f,
        8.220154e-01f,
        8.115868e-01f,
        8.007874e-01f,
        7.896515e-01f,
        7.782053e-01f,
        7.664733e-01f,
        7.544785e-01f,
        7.422473e-01f,
        7.298229e-01f,
        7.172525e-01f,
        7.045818e-01f,
        6.918553e-01f,
        6.791009e-01f,
        6.662846e-01f,
        6.533595e-01f,
        6.402807e-01f,
        6.270066e-01f,
        6.135148e-01f,
        5.998494e-01f,
        5.860682e-01f,
        5.722261e-01f,
        5.583746e-01f,
        5.445535e-01f,
        5.307673e-01f,
        5.170130e-01f,
        5.032889e-01f,
        4.895950e-01f,
        4.759442e-01f,
        4.623958e-01f,
        4.490154e-01f,
        4.358622e-01f,
        4.229897e-01f,
        4.104152e-01f,
        3.980356e-01f,
        3.857300e-01f,
        3.733907e-01f,
        3.609245e-01f,
        3.482860e-01f,
        3.355702e-01f,
        3.228963e-01f,
        3.103704e-01f,
        2.980865e-01f,
        2.861160e-01f,
        2.744822e-01f,
        2.631953e-01f,
        2.522628e-01f,
        2.416902e-01f,
        2.314809e-01f,
        2.216378e-01f,
        2.121622e-01f,
        2.030542e-01f,
        1.943124e-01f,
        1.859227e-01f,
        1.778274e-01f,
        1.699654e-01f,
        1.622841e-01f,
        1.547397e-01f,
        1.473081e-01f,
        1.400169e-01f,
        1.329013e-01f,
        1.259913e-01f,
        1.193120e-01f,
        1.128820e-01f,
        1.067113e-01f,
        1.008052e-01f,
        9.516653e-02f,
        8.979594e-02f,
        8.469044e-02f,
        7.984009e-02f,
        7.523372e-02f,
        7.086061e-02f,
        6.671045e-02f,
        6.277360e-02f,
        5.904179e-02f,
        5.550703e-02f,
        5.216139e-02f,
        4.899699e-02f,
        4.600578e-02f,
        4.317885e-02f,
        4.050755e-02f,
        3.798376e-02f,
        3.559982e-02f,
        3.334856e-02f,
        3.122332e-02f,
        2.921780e-02f,
        2.732601e-02f,
        2.554223e-02f,
        2.386121e-02f,
        2.227859e-02f,
        2.079020e-02f,
        1.939185e-02f,
        1.807939e-02f,
        1.684817e-02f,
        1.569188e-02f,
        1.460446e-02f,
        1.358062e-02f,
        1.261573e-02f,
        1.170696e-02f,
        1.085608e-02f,
        1.006476e-02f,
        9.333376e-03f,
        8.661284e-03f,
        8.046048e-03f,
        7.481130e-03f,
        6.959987e-03f,
        6.477070e-03f,
        6.027677e-03f,
        5.608169e-03f,
        5.216691e-03f,
        4.851785e-03f,
        4.512008e-03f,
        4.195941e-03f,
        3.902057e-03f,
        3.628371e-03f,
        3.373005e-03f,
        3.134315e-03f,
        2.910864e-03f,
        2.701528e-03f,
        2.505796e-03f,
        2.323231e-03f,
        2.153333e-03f,
        1.995557e-03f,
        1.849316e-03f,
        1.713976e-03f,
        1.588899e-03f,
        1.473453e-03f,
        1.367022e-03f,
        1.268954e-03f,
        1.178421e-03f,
        1.094644e-03f,
        1.016943e-03f,
        9.447269e-04f,
        8.775171e-04f,
        8.150438e-04f,
        7.570755e-04f,
        7.033755e-04f,
        6.537050e-04f,
        6.078048e-04f,
        5.653435e-04f,
        5.260046e-04f,
        4.895061e-04f,
        4.555970e-04f,
        4.240548e-04f,
        3.946860e-04f,
        3.673178e-04f,
        3.417941e-04f,
        3.179738e-04f,
        2.957441e-04f,
        2.750558e-04f,
        2.558640e-04f,
        2.381142e-04f,
        2.217445e-04f,
        2.066711e-04f,
        1.927474e-04f,
        1.798315e-04f,
        1.678023e-04f,
        1.565566e-04f,
        1.460168e-04f,
        1.361535e-04f,
        1.269451e-04f,
        1.183671e-04f,
        1.103928e-04f,
        1.029908e-04f,
        9.611836e-05f,
        8.973323e-05f,
        8.379694e-05f,
        7.827442e-05f,
        7.313312e-05f,
        6.834142e-05f,
        6.387035e-05f,
        5.969389e-05f,
        5.578862e-05f,
        5.213509e-05f,
        4.872179e-05f,
        4.553845e-05f,
        4.257443e-05f,
        3.981884e-05f,
        3.725877e-05f,
        3.487467e-05f,
        3.264765e-05f,
        3.056140e-05f,
        2.860175e-05f,
        2.675841e-05f,
        2.502943e-05f,
        2.341373e-05f,
        2.190914e-05f,
        2.051259e-05f,
        1.921902e-05f,
        1.801796e-05f,
        1.689899e-05f,
        1.585309e-05f,
        1.487243e-05f,
        1.395085e-05f,
        1.308528e-05f,
        1.227327e-05f,
        1.151233e-05f,
        1.080001e-05f,
        1.013364e-05f,
        9.509919e-06f,
        8.925630e-06f,
        8.377852e-06f,
        7.863920e-06f,
        7.381539e-06f,
        6.929096e-06f,
        6.505136e-06f,
        6.108221e-06f,
        5.736935e-06f,
        5.389831e-06f,
        5.065269e-06f,
        4.761667e-06f,
        4.477561e-06f,
        4.211597e-06f,
        3.962457e-06f,
        3.728674e-06f,
        3.508881e-06f,
        3.301868e-06f,
        3.106561e-06f,
        2.922119e-06f,
        2.748208e-06f,
        2.584560e-06f,
        2.430867e-06f,
        2.286786e-06f,
        2.151905e-06f,
        2.025656e-06f,
        1.907464e-06f,
        1.796794e-06f,
        1.693147e-06f,
        1.596032e-06f,
        1.504903e-06f,
        1.419245e-06f,
        1.338600e-06f,
        1.262556e-06f,
        1.190771e-06f,
        1.123031e-06f,
        1.059151e-06f,
        9.989507e-07f,
        9.422514e-07f,
        8.888804e-07f,
        8.386690e-07f,
        7.914539e-07f,
        7.470770e-07f,
        7.053860e-07f,
    }};
    static constexpr CIEColorMatchingFunction cieZColorMatchingFunction = {{
        1.847260e-02f,
        2.221101e-02f,
        2.669819e-02f,
        3.206937e-02f,
        3.847832e-02f,
        4.609784e-02f,
        5.511953e-02f,
        6.575257e-02f,
        7.822113e-02f,
        9.276013e-02f,
        1.096090e-01f,
        1.290077e-01f,
        1.512047e-01f,
        1.764441e-01f,
        2.049517e-01f,
        2.369246e-01f,
        2.725123e-01f,
        3.117820e-01f,
        3.547064e-01f,
        4.011473e-01f,
        4.508369e-01f,
        5.034164e-01f,
        5.586361e-01f,
        6.162734e-01f,
        6.760982e-01f,
        7.378822e-01f,
        8.013019e-01f,
        8.655573e-01f,
        9.295791e-01f,
        9.921293e-01f,
        1.051821e+00f,
        1.107509e+00f,
        1.159527e+00f,
        1.208869e+00f,
        1.256834e+00f,
        1.305008e+00f,
        1.354758e+00f,
        1.405594e+00f,
        1.456414e+00f,
        1.505960e+00f,
        1.552826e+00f,
        1.595902e+00f,
        1.635768e+00f,
        1.673573e+00f,
        1.710604e+00f,
        1.748280e+00f,
        1.787504e+00f,
        1.826609e+00f,
        1.863108e+00f,
        1.894332e+00f,
        1.917479e+00f,
        1.930529e+00f,
        1.934819e+00f,
        1.932650e+00f,
        1.926395e+00f,
        1.918437e+00f,
        1.910430e+00f,
        1.901224e+00f,
        1.889000e+00f,
        1.871996e+00f,
        1.848545e+00f,
        1.817792e+00f,
        1.781627e+00f,
        1.742514e+00f,
        1.702749e+00f,
        1.664439e+00f,
        1.629207e+00f,
        1.597360e+00f,
        1.568896e+00f,
        1.543823e+00f,
        1.522157e+00f,
        1.503611e+00f,
        1.486673e+00f,
        1.469595e+00f,
        1.450709e+00f,
        1.428440e+00f,
        1.401587e+00f,
        1.370094e+00f,
        1.334220e+00f,
        1.294275e+00f,
        1.250610e+00f,
        1.203696e+00f,
        1.154316e+00f,
        1.103284e+00f,
        1.051347e+00f,
        9.991789e-01f,
        9.473958e-01f,
        8.966222e-01f,
        8.473981e-01f,
        8.001576e-01f,
        7.552379e-01f,
        7.127879e-01f,
        6.725198e-01f,
        6.340976e-01f,
        5.972433e-01f,
        5.617313e-01f,
        5.274921e-01f,
        4.948809e-01f,
        4.642586e-01f,
        4.358841e-01f,
        4.099313e-01f,
        3.864261e-01f,
        3.650566e-01f,
        3.454812e-01f,
        3.274095e-01f,
        3.105939e-01f,
        2.948102e-01f,
        2.798194e-01f,
        2.654100e-01f,
        2.514084e-01f,
        2.376753e-01f,
        2.241211e-01f,
        2.107484e-01f,
        1.975839e-01f,
        1.846574e-01f,
        1.720018e-01f,
        1.596918e-01f,
        1.479415e-01f,
        1.369428e-01f,
        1.268279e-01f,
        1.176796e-01f,
        1.094970e-01f,
        1.020943e-01f,
        9.527993e-02f,
        8.890075e-02f,
        8.283548e-02f,
        7.700982e-02f,
        7.144001e-02f,
        6.615436e-02f,
        6.117199e-02f,
        5.650407e-02f,
        5.215121e-02f,
        4.809566e-02f,
        4.431720e-02f,
        4.079734e-02f,
        3.751912e-02f,
        3.446846e-02f,
        3.163764e-02f,
        2.901901e-02f,
        2.660364e-02f,
        2.438164e-02f,
        2.234097e-02f,
        2.046415e-02f,
        1.873456e-02f,
        1.713788e-02f,
        1.566174e-02f,
        1.429644e-02f,
        1.303702e-02f,
        1.187897e-02f,
        1.081725e-02f,
        9.846470e-03f,
        8.960687e-03f,
        8.152811e-03f,
        7.416025e-03f,
        6.744115e-03f,
        6.131421e-03f,
        5.572778e-03f,
        5.063463e-03f,
        4.599169e-03f,
        4.175971e-03f,
        3.790291e-03f,
        3.438952e-03f,
        3.119341e-03f,
        2.829038e-03f,
        2.565722e-03f,
        2.327186e-03f,
        2.111280e-03f,
        1.915766e-03f,
        1.738589e-03f,
        1.577920e-03f,
        1.432128e-03f,
        1.299781e-03f,
        1.179667e-03f,
        1.070694e-03f,
        9.718623e-04f,
        8.822531e-04f,
        8.010231e-04f,
        7.273884e-04f,
        6.606347e-04f,
        6.001146e-04f,
        5.452416e-04f,
        4.954847e-04f,
        4.503642e-04f,
        4.094455e-04f,
        3.723345e-04f,
        3.386739e-04f,
        3.081396e-04f,
        2.804370e-04f,
        2.552996e-04f,
        2.324859e-04f,
        2.117772e-04f,
        1.929758e-04f,
        1.759024e-04f,
        1.603947e-04f,
        1.463059e-04f,
        1.335031e-04f,
        1.218660e-04f,
        1.112857e-04f,
        1.016634e-04f,
        9.291003e-05f,
        8.494468e-05f,
        7.769425e-05f,
        7.109247e-05f,
        6.507936e-05f,
        5.960061e-05f,
        5.460706e-05f,
        5.005417e-05f,
        4.590157e-05f,
        4.211268e-05f,
        3.865437e-05f,
        3.549661e-05f,
        3.261220e-05f,
        2.997643e-05f,
        2.756693e-05f,
        2.536339e-05f,
        2.334738e-05f,
        2.150221e-05f,
        1.981268e-05f,
        1.826500e-05f,
        1.684667e-05f,
        1.554631e-05f,
        1.435360e-05f,
        1.325915e-05f,
        1.225443e-05f,
        1.133169e-05f,
        1.048387e-05f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
        0.000000e+00f,
    }};
    float x;
    float y;
    float z;
    constexpr XYZColor() noexcept : x(), y(), z()
    {
    }
    constexpr XYZColor(float x, float y, float z) noexcept : x(x), y(y), z(z)
    {
    }
    static constexpr XYZColor fromWavelength(float wavelengthInNanometers) noexcept
    {
        return XYZColor(cieXColorMatchingFunction.get(wavelengthInNanometers),
                        cieYColorMatchingFunction.get(wavelengthInNanometers),
                        cieZColorMatchingFunction.get(wavelengthInNanometers));
    }
};

struct RGBColorBase
{
    static constexpr CIEColorMatchingFunction makeRColorMatchingFunction() noexcept
    {
        CIEColorMatchingFunction retval{};
        for(std::size_t i = 0; i < CIEColorMatchingFunction::valueCount; i++)
            retval.values[i] = getRFromXYZ(XYZColor::cieXColorMatchingFunction.values[i],
                                           XYZColor::cieYColorMatchingFunction.values[i],
                                           XYZColor::cieZColorMatchingFunction.values[i]);
        return retval;
    }
    static constexpr CIEColorMatchingFunction makeGColorMatchingFunction() noexcept
    {
        CIEColorMatchingFunction retval{};
        for(std::size_t i = 0; i < CIEColorMatchingFunction::valueCount; i++)
            retval.values[i] = getGFromXYZ(XYZColor::cieXColorMatchingFunction.values[i],
                                           XYZColor::cieYColorMatchingFunction.values[i],
                                           XYZColor::cieZColorMatchingFunction.values[i]);
        return retval;
    }
    static constexpr CIEColorMatchingFunction makeBColorMatchingFunction() noexcept
    {
        CIEColorMatchingFunction retval{};
        for(std::size_t i = 0; i < CIEColorMatchingFunction::valueCount; i++)
            retval.values[i] = getBFromXYZ(XYZColor::cieXColorMatchingFunction.values[i],
                                           XYZColor::cieYColorMatchingFunction.values[i],
                                           XYZColor::cieZColorMatchingFunction.values[i]);
        return retval;
    }
    static constexpr float getRFromXYZ(float x, float y, float z) noexcept
    {
        // values from sRGB spec
        return 3.2406f * x - 1.5372f * y - 0.4986f * z;
    }
    static constexpr float getGFromXYZ(float x, float y, float z) noexcept
    {
        // values from sRGB spec
        return -0.9689f * x + 1.8758f * y + 0.0415f * z;
    }
    static constexpr float getBFromXYZ(float x, float y, float z) noexcept
    {
        // values from sRGB spec
        return 0.0557f * x - 0.204f * y + 1.057f * z;
    }
    static constexpr float getXFromRGB(float r, float g, float b) noexcept
    {
        // values computed from XYZ to RGB values
        return 0.412395588f * r + 0.357583430f * g + 0.180492647f * b;
    }
    static constexpr float getYFromRGB(float r, float g, float b) noexcept
    {
        // values computed from XYZ to RGB values
        return 0.212586230f * r + 0.715170303f * g + 0.072200498f * b;
    }
    static constexpr float getZFromRGB(float r, float g, float b) noexcept
    {
        // values computed from XYZ to RGB values
        return 0.019297215f * r + 0.119183864f * g + 0.950497125f * b;
    }
};

/** linear color using sRGB primaries */
struct RGBColor : public RGBColorBase
{
    static constexpr CIEColorMatchingFunction srgbRColorMatchingFunction =
        makeRColorMatchingFunction();
    static constexpr CIEColorMatchingFunction srgbGColorMatchingFunction =
        makeGColorMatchingFunction();
    static constexpr CIEColorMatchingFunction srgbBColorMatchingFunction =
        makeBColorMatchingFunction();
    float r;
    float g;
    float b;
    constexpr RGBColor() noexcept : r(), g(), b()
    {
    }
    constexpr RGBColor(float r, float g, float b) noexcept : r(r), g(g), b(b)
    {
    }
    static constexpr RGBColor fromWavelength(float wavelengthInNanometers) noexcept
    {
        return RGBColor(srgbRColorMatchingFunction.get(wavelengthInNanometers),
                        srgbGColorMatchingFunction.get(wavelengthInNanometers),
                        srgbBColorMatchingFunction.get(wavelengthInNanometers));
    }
    constexpr float getIntensityAtWavelength(float wavelengthInNanometers) const noexcept
    {
        constexpr float redStart = 588.75f;
        constexpr float redEnd = 688.75f;
        constexpr float greenStart = 478.75f;
        constexpr float greenEnd = 589.75f;
        constexpr float blueStart = 390.0f;
        constexpr float blueEnd = 477.25f;
        float retval = 0;
        if(redStart <= wavelengthInNanometers && wavelengthInNanometers <= redEnd)
            retval += 3.195246750265984f * r - 0.002970242264085593f * g - 0.00109056535437167f * b;
        if(greenStart <= wavelengthInNanometers && wavelengthInNanometers <= greenEnd)
            retval += 0.005101036493115453f * r + 3.939981888704025f * g + 0.1697743695519769f * b;
        if(blueStart <= wavelengthInNanometers && wavelengthInNanometers <= blueEnd)
            retval += 0.08549718959638315f * r + 0.01187615405212644f * g + 4.223555982972261f * b;
        return retval;
    }
    constexpr explicit RGBColor(const XYZColor &xyz) noexcept : r(getRFromXYZ(xyz.x, xyz.y, xyz.z)),
                                                                g(getGFromXYZ(xyz.x, xyz.y, xyz.z)),
                                                                b(getBFromXYZ(xyz.x, xyz.y, xyz.z))
    {
    }
    constexpr explicit operator XYZColor() const noexcept
    {
        return XYZColor(getXFromRGB(r, g, b), getYFromRGB(r, g, b), getZFromRGB(r, g, b));
    }
    friend constexpr RGBColor operator+(const RGBColor &a, const RGBColor &b) noexcept
    {
        return RGBColor(a.r + b.r, a.g + b.g, a.b + b.b);
    }
    friend constexpr RGBColor operator-(const RGBColor &a, const RGBColor &b) noexcept
    {
        return RGBColor(a.r - b.r, a.g - b.g, a.b - b.b);
    }
    friend constexpr RGBColor operator*(const RGBColor &c, float factor) noexcept
    {
        return RGBColor(c.r * factor, c.g * factor, c.b * factor);
    }
    friend constexpr RGBColor operator*(float factor, const RGBColor &c) noexcept
    {
        return RGBColor(c.r * factor, c.g * factor, c.b * factor);
    }
    constexpr RGBColor &operator+=(const RGBColor &rt) noexcept
    {
        return *this = *this + rt;
    }
    constexpr RGBColor &operator-=(const RGBColor &rt) noexcept
    {
        return *this = *this - rt;
    }
    constexpr RGBColor &operator*=(float factor) noexcept
    {
        return *this = *this * factor;
    }
};

/** sRGB color (gamma-corrected) */
struct SRGBColorF
{
    float r;
    float g;
    float b;
    constexpr SRGBColorF() noexcept : r(), g(), b()
    {
    }
    constexpr SRGBColorF(float r, float g, float b) noexcept : r(r), g(g), b(b)
    {
    }
    explicit SRGBColorF(const RGBColor &c) noexcept : r(linearToGamma(c.r)),
                                                      g(linearToGamma(c.g)),
                                                      b(linearToGamma(c.b))
    {
    }
    explicit operator RGBColor() const noexcept
    {
        return RGBColor(gammaToLinear(r), gammaToLinear(g), gammaToLinear(b));
    }
    static constexpr float linearToGammaTransitionPoint = 0.0031308f; // from sRGB spec
    static constexpr float linearToGammaLinearFactor = 12.92f; // from sRGB spec
    static constexpr float linearToGammaA = 0.055f; // from sRGB spec
    static constexpr float linearToGammaExponent = 1 / 2.4; // from sRGB spec
    static constexpr float linearToGammaPowerFactor = 1 + linearToGammaA;
    static constexpr float gammaToLinearLinearFactor = 1 / linearToGammaLinearFactor;
    static constexpr float gammaToLinearTransitionPoint =
        linearToGammaTransitionPoint * linearToGammaLinearFactor;
    static constexpr float gammaToLinearA = linearToGammaA;
    static constexpr float gammaToLinearExponent = 1 / linearToGammaExponent;
    static constexpr float gammaToLinearBaseFactor = 1 / linearToGammaPowerFactor;
    static float linearToGammaPositive(float v) noexcept
    {
        return v < linearToGammaTransitionPoint ?
                   linearToGammaLinearFactor * v :
                   linearToGammaPowerFactor * std::pow(v, linearToGammaExponent) - linearToGammaA;
    }
    static float gammaToLinearPositive(float v) noexcept
    {
        return v < gammaToLinearTransitionPoint ?
                   gammaToLinearLinearFactor * v :
                   std::pow((v + gammaToLinearA) * gammaToLinearBaseFactor, linearToGammaExponent);
    }
    static float linearToGamma(float v) noexcept
    {
        return v < 0 ? -linearToGammaPositive(-v) : linearToGammaPositive(v);
    }
    static float gammaToLinear(float v) noexcept
    {
        return v < 0 ? -gammaToLinearPositive(-v) : gammaToLinearPositive(v);
    }
};

struct SRGBColorU8
{
    std::uint8_t r;
    std::uint8_t g;
    std::uint8_t b;
    std::uint8_t x;
    static constexpr std::uint8_t floatToInt(float v) noexcept
    {
        if(v < 0)
            v = 0;
        else if(!(v < 1)) // catch NaN
            v = 1;
        int value = static_cast<int>(v * static_cast<float>(0xFF) + 0.5f);
        if(value < 0)
            value = 0;
        else if(value > 0xFF)
            value = 0xFF;
        return value;
    }
    constexpr SRGBColorU8() noexcept : r(), g(), b(), x()
    {
    }
    constexpr SRGBColorU8(std::uint8_t r,
                          std::uint8_t g,
                          std::uint8_t b,
                          std::uint8_t x = 0xFF) noexcept : r(r),
                                                            g(g),
                                                            b(b),
                                                            x(x)
    {
    }
    constexpr explicit SRGBColorU8(const SRGBColorF &c, std::uint8_t x = 0xFF) noexcept
        : r(floatToInt(c.r)),
          g(floatToInt(c.g)),
          b(floatToInt(c.b)),
          x(x)
    {
    }
};

struct SRGBColorU16
{
    std::uint16_t r;
    std::uint16_t g;
    std::uint16_t b;
    std::uint16_t x;
    static constexpr std::uint16_t floatToInt(float v) noexcept
    {
        if(v < 0)
            v = 0;
        else if(!(v < 1)) // catch NaN
            v = 1;
        long value = static_cast<long>(v * static_cast<float>(0xFFFFL) + 0.5f);
        if(value < 0)
            value = 0;
        else if(value > 0xFFFFL)
            value = 0xFFFFL;
        return value;
    }
    constexpr SRGBColorU16() noexcept : r(), g(), b(), x()
    {
    }
    constexpr SRGBColorU16(std::uint16_t r,
                           std::uint16_t g,
                           std::uint16_t b,
                           std::uint16_t x = 0xFFFFU) noexcept : r(r),
                                                                 g(g),
                                                                 b(b),
                                                                 x(x)
    {
    }
    constexpr explicit SRGBColorU16(const SRGBColorF &c, std::uint16_t x = 0xFFFFU) noexcept
        : r(floatToInt(c.r)),
          g(floatToInt(c.g)),
          b(floatToInt(c.b)),
          x(x)
    {
    }
};

struct WavelengthIntensityColor
{
    float wavelengthInNanometers;
    float intensity;
    constexpr WavelengthIntensityColor() noexcept : wavelengthInNanometers(), intensity()
    {
    }
    constexpr WavelengthIntensityColor(float wavelengthInNanometers, float intensity) noexcept
        : wavelengthInNanometers(wavelengthInNanometers),
          intensity(intensity)
    {
    }
    constexpr explicit operator RGBColor() const noexcept
    {
        return intensity * RGBColor::fromWavelength(wavelengthInNanometers);
    }
};

#endif /* COLOR_H_ */
